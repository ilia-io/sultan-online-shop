import { PayloadAction, createSlice } from '@reduxjs/toolkit';
import DB from '../../assets/db.json';
import { RootState } from '../store';

export interface FilterState {
  categories: string[];
  activeCategory: string;
}

const initialState: FilterState = {
  categories: DB.careTypes,
  activeCategory: '',
};

export const filterSlice = createSlice({
  name: 'filter',
  initialState,
  reducers: {
    setActiveCaterogy: (state, action: PayloadAction<string>) => {
      state.activeCategory = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const filterSelector = (state: RootState) => state.filter;

export const { setActiveCaterogy } = filterSlice.actions;

export default filterSlice.reducer;
