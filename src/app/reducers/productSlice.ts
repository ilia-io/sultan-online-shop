import { PayloadAction, createSlice } from '@reduxjs/toolkit';
import DB from '../../assets/db.json';
import { IProduct } from '../../@types/Product';
import { RootState } from '../store';

export interface ProductState {
  items: IProduct[];
  currentItem: IProduct | undefined;
}

const initialState: ProductState = {
  items: DB.products,
  currentItem: DB.products[0],
};

export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    getCurrentItem: (state, action: PayloadAction<number>) => {
      state.currentItem = state.items.find(
        (item) => item.barcode === action.payload
      );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const productsSelector = (state: RootState) => state.product.items;
export const currentItemSelector = (state: RootState) => state.product.currentItem;

export const { getCurrentItem } = productSlice.actions;

export default productSlice.reducer;
