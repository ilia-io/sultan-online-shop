import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import DB from '../../assets/db.json';
import { IProduct } from "../../@types/Product";

export interface ProductState {
  items: IProduct[];
  status?: 'idle' | 'loading' | 'failed';
}

const initialState: ProductState = {
  items: DB.products,
  status: 'idle',
};

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export default productSlice.reducer;